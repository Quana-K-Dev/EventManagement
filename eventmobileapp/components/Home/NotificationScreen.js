import React, { useState, useEffect, useContext } from "react";
import { View, Text, FlatList, Alert } from "react-native";
import { Card, Button } from "react-native-paper";
import Apis, { authApis, endpoints } from "../../config/Apis";
import MyStyles from "../../styles/MyStyles";
import moment from "moment";
import { AuthContext } from "../../config/AuthContext";

const NotificationScreen = () => {
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(false);
  const [tickets, setTickets] = useState([]);
  const { token } = useContext(AuthContext);

  // H√†m t√≠nh s·ªë ng√†y t·ª´ hi·ªán t·∫°i ƒë·∫øn ng√†y s·ª± ki·ªán
  const calculateDaysToEvent = (startDate) => {
    const now = moment();
    const eventDate = moment(startDate);
    return eventDate.diff(now, 'days');
  };

  // H√†m t·∫°o th√¥ng b√°o d·ª±a tr√™n s·ªë ng√†y c√≤n l·∫°i
  const createEventNotification = (ticket, daysRemaining) => {
    let message = "";
    let shouldNotify = false;

    if (daysRemaining === 0) {
      message = `S·ª± ki·ªán "${ticket.event_name}" b·∫Øt ƒë·∫ßu h√¥m nay! ƒê·ª´ng qu√™n tham gia.`;
      shouldNotify = true;
    } else if (daysRemaining === 1) {
      message = `S·ª± ki·ªán "${ticket.event_name}" s·∫Ω di·ªÖn ra v√†o ng√†y mai. H√£y chu·∫©n b·ªã s·∫µn s√†ng!`;
      shouldNotify = true;
    } else if (daysRemaining === 3) {
      message = `C√≤n 3 ng√†y n·ªØa s·ª± ki·ªán "${ticket.event_name}" s·∫Ω di·ªÖn ra. ƒê·ª´ng qu√™n ghi nh·ªõ!`;
      shouldNotify = true;
    } else if (daysRemaining === 7) {
      message = `C√≤n 1 tu·∫ßn n·ªØa s·ª± ki·ªán "${ticket.event_name}" s·∫Ω di·ªÖn ra. H√£y s·∫Øp x·∫øp l·ªãch tr√¨nh!`;
      shouldNotify = true;
    } else if (daysRemaining < 0) {
      message = `S·ª± ki·ªán "${ticket.event_name}" ƒë√£ b·∫Øt ƒë·∫ßu ${Math.abs(daysRemaining)} ng√†y tr∆∞·ªõc.`;
      shouldNotify = false; // Kh√¥ng c·∫ßn th√¥ng b√°o cho s·ª± ki·ªán ƒë√£ qua
    }

    return { message, shouldNotify };
  };

  // H√†m load v√† x·ª≠ l√Ω tickets ƒë·ªÉ t·∫°o th√¥ng b√°o
  const loadTicketsAndCreateNotifications = async () => {
    try {
      setLoading(true);

      // Load tickets c·ªßa user
      const ticketsRes = await authApis(token).get(endpoints.tickets);
      setTickets(ticketsRes.data);

      // T·∫°o th√¥ng b√°o cho t·ª´ng ticket
      const eventNotifications = [];

      for (const ticket of ticketsRes.data) {
        try {
          // G·ªçi API ƒë·ªÉ l·∫•y chi ti·∫øt ticket
          const ticketDetailRes = await authApis(token).get(`${endpoints.tickets}${ticket.id}/`);
          const ticketDetail = ticketDetailRes.data;

          // T√≠nh s·ªë ng√†y c√≤n l·∫°i
          const daysRemaining = calculateDaysToEvent(ticketDetail.start_date);

          // T·∫°o th√¥ng b√°o
          const notification = createEventNotification(ticketDetail, daysRemaining);

          if (notification.shouldNotify) {
            eventNotifications.push({
              id: `event_${ticket.id}_${Date.now()}`,
              message: notification.message,
              created_date: new Date().toISOString(),
              is_read: false,
              type: 'event_reminder',
              ticket_id: ticket.id,
              days_remaining: daysRemaining
            });
          }
        } catch (error) {
          console.error(`Error processing ticket ${ticket.id}:`, error);
        }
      }

      // Load th√¥ng b√°o hi·ªán c√≥
      const notificationsRes = await authApis(token).get(endpoints.notifications);

      // K·∫øt h·ª£p th√¥ng b√°o s·ª± ki·ªán v·ªõi th√¥ng b√°o hi·ªán c√≥
      const allNotifications = [...eventNotifications, ...notificationsRes.data];

      // S·∫Øp x·∫øp theo ng√†y t·∫°o (m·ªõi nh·∫•t tr∆∞·ªõc)
      allNotifications.sort((a, b) => new Date(b.created_date) - new Date(a.created_date));

      setNotifications(allNotifications);

    } catch (ex) {
      console.error(ex);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i th√¥ng b√°o");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadTicketsAndCreateNotifications();

    // Thi·∫øt l·∫≠p interval ƒë·ªÉ ki·ªÉm tra th√¥ng b√°o ƒë·ªãnh k·ª≥ (m·ªói gi·ªù)
    const interval = setInterval(() => {
      loadTicketsAndCreateNotifications();
    }, 3600000); // 1 gi·ªù = 3600000ms

    return () => clearInterval(interval);
  }, []);

  // H√†m format hi·ªÉn th·ªã th√¥ng b√°o v·ªõi th√¥ng tin b·ªï sung
  const formatNotificationMessage = (item) => {
    let displayMessage = item.message;

    if (item.type === 'event_reminder' && item.days_remaining !== undefined) {
      const daysText = item.days_remaining === 0 ? "H√¥m nay" :
                       item.days_remaining === 1 ? "Ng√†y mai" :
                       item.days_remaining > 1 ? `C√≤n ${item.days_remaining} ng√†y` :
                       `ƒê√£ qua ${Math.abs(item.days_remaining)} ng√†y`;
      displayMessage += ` (${daysText})`;
    }

    return displayMessage;
  };

  const renderNotification = ({ item }) => (
    <Card style={[MyStyles.m, {
      marginBottom: 10,
      backgroundColor: item.type === 'event_reminder' ? '#E3F2FD' : '#FFFFFF',
      borderLeft: item.type === 'event_reminder' ? '4px solid #2196F3' : 'none'
    }]}>
      <Card.Content>
        <Text style={[
          MyStyles.subject,
          { color: item.type === 'event_reminder' ? '#1976D2' : '#000000' }
        ]}>
          {formatNotificationMessage(item)}
        </Text>
        <Text style={{ marginTop: 5 }}>
          Ng√†y: {moment(item.created_date).format("DD/MM/YYYY HH:mm")}
        </Text>
        <Text style={{
          color: item.is_read ? '#4CAF50' : '#FF9800',
          fontWeight: 'bold'
        }}>
          Tr·∫°ng th√°i: {item.is_read ? "ƒê√£ ƒë·ªçc" : "Ch∆∞a ƒë·ªçc"}
        </Text>
        {item.type === 'event_reminder' && (
          <Text style={{
            marginTop: 5,
            fontSize: 12,
            color: '#666',
            fontStyle: 'italic'
          }}>
            üìÖ Nh·∫Øc nh·ªü s·ª± ki·ªán
          </Text>
        )}
      </Card.Content>
    </Card>
  );

  return (
    <View style={MyStyles.container}>
      <Text style={MyStyles.title}>Th√¥ng b√°o</Text>

      {/* Hi·ªÉn th·ªã t·ªïng quan */}
      <Card style={[MyStyles.m, { marginBottom: 15, backgroundColor: '#F5F5F5' }]}>
        <Card.Content>
          <Text style={{ fontWeight: 'bold', fontSize: 16 }}>
            üìä T·ªïng quan
          </Text>
          <Text style={{ marginTop: 5 }}>
            T·ªïng s·ªë th√¥ng b√°o: {notifications.length}
          </Text>
          <Text>
            Th√¥ng b√°o s·ª± ki·ªán: {notifications.filter(n => n.type === 'event_reminder').length}
          </Text>
          <Text>
            Ch∆∞a ƒë·ªçc: {notifications.filter(n => !n.is_read).length}
          </Text>
        </Card.Content>
      </Card>

      <FlatList
        data={notifications}
        renderItem={renderNotification}
        keyExtractor={(item) => item.id.toString()}
        refreshing={loading}
        onRefresh={loadTicketsAndCreateNotifications}
        showsVerticalScrollIndicator={false}
        ListEmptyComponent={
          <Card style={MyStyles.m}>
            <Card.Content>
              <Text style={{ textAlign: 'center', color: '#666' }}>
                Kh√¥ng c√≥ th√¥ng b√°o n√†o
              </Text>
            </Card.Content>
          </Card>
        }
      />

      {/* N√∫t refresh th·ªß c√¥ng */}
      <Button
        mode="contained"
        onPress={loadTicketsAndCreateNotifications}
        style={{ margin: 15 }}
        disabled={loading}
      >
        {loading ? "ƒêang t·∫£i..." : "L√†m m·ªõi th√¥ng b√°o"}
      </Button>
    </View>
  );
};

export default NotificationScreen;